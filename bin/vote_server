#!/usr/bin/env ruby

#the logic for sending vote notification emails

#modeled after the patter described here
#http://napkin.highgroove.com/articles/2008/05/21/running-background-jobs-in-ruby-on-rails-revisited

#requires
#sudo gem install daemons

require 'net/smtp'
require File.dirname(__FILE__) + '/../config/environment.rb'

log = Logger.new( File.dirname(__FILE__) + '/../log/vote_server.log' )

#how often should we check if notifications should be sent in seconds?
CHECK_INTERVAL = 60

loop do

  Course.active.each do |course|

    Time.zone = course.time_zone
    log.debug("#{course.title}: #{Time.zone.now}")

    course.chambers.each do |chamber|

      Vote.pending.after_start_at.find_all_by_chamber_id( chamber.id ).each do |vote|
        log.debug("start vote: #{vote.id}")
        begin
          vote.start
        rescue => e
          log.error( e.inspect )
        end
      end

      Vote.in_progress.after_finish_at.find_all_by_chamber_id( chamber.id ).each do |vote|
        log.debug("finish vote: #{vote.id}")
        begin
          vote.finish
        rescue => e
          log.error( e.inspect )
        end
      end

    end

  end

  sleep(CHECK_INTERVAL)
end
